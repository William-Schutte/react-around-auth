{"ast":null,"code":"// ###########################  API Class  ########################################################\nclass Api {\n  constructor(options) {\n    this.options = options;\n  } // Function replaced by getUser in auth\n\n\n  getUserInfo(token) {\n    return fetch(`${this.options.baseUrl}/user`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`\n      }\n    }).then(res => {\n      if (res.status === 200) {\n        return res.json().data;\n      } else {\n        return Promise.reject(`Error: ${res.status}`);\n      }\n    });\n  }\n\n  patchUserInfo({\n    name: newName,\n    about: newAbout,\n    token\n  }) {\n    return fetch(`${this.options.baseUrl}/user/me`, {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        name: newName,\n        about: newAbout\n      })\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        return Promise.reject(`Error: ${res.status}`);\n      }\n    });\n  }\n\n  patchUserPic({\n    avatar: newUrl\n  }) {\n    return fetch(`${this.options.baseUrl}/user/me/avatar`, {\n      method: \"PATCH\",\n      credentials: \"include\",\n      mode: \"no-cors\",\n      headers: this.options.headers,\n      body: JSON.stringify({\n        avatar: newUrl\n      })\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        return Promise.reject(`Error: ${res.status}`);\n      }\n    });\n  }\n\n  getInitialCards(token) {\n    return fetch(`${this.options.baseUrl}/cards`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json().data;\n      } else {\n        return Promise.reject(`Error: ${res.status}`);\n      }\n    });\n  }\n\n  addNewCard({\n    name: newName,\n    link: newLink\n  }) {\n    return fetch(`${this.options.baseUrl}/cards`, {\n      method: \"POST\",\n      credentials: \"include\",\n      mode: \"no-cors\",\n      headers: this.options.headers,\n      body: JSON.stringify({\n        name: newName,\n        link: newLink\n      })\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        return Promise.reject(`Error: ${res.status}`);\n      }\n    });\n  }\n\n  deleteCard(cardId) {\n    return fetch(`${this.options.baseUrl}/cards/${cardId}`, {\n      method: \"DELETE\",\n      credentials: \"include\",\n      mode: \"no-cors\",\n      headers: this.options.headers\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      } else {\n        return Promise.reject(`Error: ${res.status}`);\n      }\n    });\n  }\n\n  likeCard(cardData, isLiked) {\n    // If the card is already liked by the user, the like is removed, else a like is added\n    if (isLiked) {\n      return fetch(`${this.options.baseUrl}/cards/likes/${cardData._id}`, {\n        method: \"DELETE\",\n        credentials: \"include\",\n        mode: \"no-cors\",\n        headers: this.options.headers\n      }).then(res => {\n        if (res.ok) {\n          return res.json();\n        } else {\n          return Promise.reject(`Error: ${res.status}`);\n        }\n      });\n    } else {\n      return fetch(`${this.options.baseUrl}/cards/likes/${cardData._id}`, {\n        method: \"PUT\",\n        credentials: \"include\",\n        mode: \"no-cors\",\n        headers: this.options.headers\n      }).then(res => {\n        if (res.ok) {\n          return res.json();\n        } else {\n          return Promise.reject(`Error: ${res.status}`);\n        }\n      });\n    }\n  }\n\n}\n\nconst api = new Api({\n  baseUrl: \"https://api.ws.p15.students.nomoreparties.site\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n}); // const api = new Api({\n//     baseUrl: \"https://around.nomoreparties.co/v1/group-1\",\n//     headers: {\n//         authorization: \"b3ddd9c8-cc64-4470-93b1-0840e92522c5\",\n//         \"Content-Type\": \"application/json\"\n//     }\n// });\n\nexport default api;","map":{"version":3,"sources":["/Users/william/Documents/Programming/Practicum/react-around-auth/src/utils/api.js"],"names":["Api","constructor","options","getUserInfo","token","fetch","baseUrl","method","headers","then","res","status","json","data","Promise","reject","patchUserInfo","name","newName","about","newAbout","body","JSON","stringify","ok","patchUserPic","avatar","newUrl","credentials","mode","getInitialCards","addNewCard","link","newLink","deleteCard","cardId","likeCard","cardData","isLiked","_id","api"],"mappings":"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","sourcesContent":["// ###########################  API Class  ########################################################\n\nclass Api {\n    constructor(options) {\n      this.options = options;\n    }\n  \n    // Function replaced by getUser in auth\n    getUserInfo(token) {\n        return fetch(`${this.options.baseUrl}/user`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            },\n        })\n          .then(res => {\n            if (res.status === 200) {\n                return res.json().data;\n            } else {\n                return Promise.reject(`Error: ${res.status}`);\n            }\n          });\n    }\n\n    patchUserInfo({ name: newName, about: newAbout, token }) {\n        return fetch(`${this.options.baseUrl}/user/me`, {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            },\n            body: JSON.stringify({ name: newName, about: newAbout })\n        })\n            .then(res => {\n                if (res.ok) {\n                    return res.json();\n                } else {\n                    return Promise.reject(`Error: ${res.status}`);\n                }\n            });\n    }\n\n    patchUserPic({ avatar: newUrl }) {\n        return fetch(`${this.options.baseUrl}/user/me/avatar`, {\n            method: \"PATCH\",\n            credentials: \"include\",\n            mode: \"no-cors\",\n            headers: this.options.headers,\n            body: JSON.stringify({ avatar: newUrl })\n        })\n            .then(res => {\n                if (res.ok) {\n                    return res.json();\n                } else {\n                    return Promise.reject(`Error: ${res.status}`);\n                }\n            });\n    }\n\n    getInitialCards(token) {\n        return fetch(`${this.options.baseUrl}/cards`, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            },\n        })\n          .then(res => {\n            if (res.ok) {\n                return res.json().data;\n            } else {\n                return Promise.reject(`Error: ${res.status}`);\n            }\n          });\n    }\n    \n    addNewCard({ name: newName, link: newLink }) {\n        return fetch(`${this.options.baseUrl}/cards`, {\n            method: \"POST\",\n            credentials: \"include\",\n            mode: \"no-cors\",\n            headers: this.options.headers,\n            body: JSON.stringify({ name: newName, link: newLink })\n          })\n            .then(res => {\n              if (res.ok) {\n                  return res.json();\n              } else {\n                  return Promise.reject(`Error: ${res.status}`);\n              }\n            });\n    }\n\n    deleteCard(cardId) {\n        return fetch(`${this.options.baseUrl}/cards/${cardId}`, {\n            method: \"DELETE\",\n            credentials: \"include\",\n            mode: \"no-cors\",\n            headers: this.options.headers,\n        })\n            .then(res => {\n                if (res.ok) {\n                    return res.json();\n                } else {\n                    return Promise.reject(`Error: ${res.status}`);\n                }\n            });\n    }\n\n    likeCard(cardData, isLiked) {\n        // If the card is already liked by the user, the like is removed, else a like is added\n        if (isLiked) {\n            return fetch(`${this.options.baseUrl}/cards/likes/${cardData._id}`, {\n                method: \"DELETE\",\n                credentials: \"include\",\n                mode: \"no-cors\",\n                headers: this.options.headers,\n            })\n                .then(res => {\n                    if (res.ok) {\n                        return res.json();\n                    } else {\n                        return Promise.reject(`Error: ${res.status}`);\n                    }\n                });\n        } else {\n            return fetch(`${this.options.baseUrl}/cards/likes/${cardData._id}`, {\n                method: \"PUT\",\n                credentials: \"include\",\n                mode: \"no-cors\",\n                headers: this.options.headers,\n            })\n                .then(res => {\n                    if (res.ok) {\n                        return res.json();\n                    } else {\n                        return Promise.reject(`Error: ${res.status}`);\n                    }\n                });\n        }\n        \n    }\n}\n\nconst api = new Api({\n    baseUrl: \"https://api.ws.p15.students.nomoreparties.site\",\n    headers: {\n        \"Content-Type\": \"application/json\",\n    }\n});\n\n// const api = new Api({\n//     baseUrl: \"https://around.nomoreparties.co/v1/group-1\",\n//     headers: {\n//         authorization: \"b3ddd9c8-cc64-4470-93b1-0840e92522c5\",\n//         \"Content-Type\": \"application/json\"\n//     }\n// });\n\nexport default api;"]},"metadata":{},"sourceType":"module"}