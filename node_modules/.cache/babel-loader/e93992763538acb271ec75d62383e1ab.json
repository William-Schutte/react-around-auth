{"ast":null,"code":"const BASE_URL = 'https://register.nomoreparties.co';\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      \"password\": password,\n      \"email\": email\n    })\n  }).then(res => {\n    if (res.status === 201) {\n      return res.json();\n    } else {\n      throw new Error('Unsuccessful registration');\n    }\n  }).catch(err => console.log(err));\n};\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      \"password\": password,\n      \"email\": email\n    })\n  }).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    } else {\n      throw new Error('Unsuccessful login');\n    }\n  }).then(data => {\n    localStorage.setItem('jwt', data.token);\n    return true;\n  }).catch(err => console.log(err));\n};\nexport const getUser = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    }\n  }).then(res => {\n    if (res.status === 200) {\n      return res.json();\n    }\n  });\n};","map":{"version":3,"sources":["/Users/william/Documents/Programming/Practicum/react-around-auth/src/utils/auth.js"],"names":["BASE_URL","register","email","password","fetch","method","headers","body","JSON","stringify","then","res","status","json","Error","catch","err","console","log","authorize","data","localStorage","setItem","token","getUser"],"mappings":"AACA,MAAMA,QAAQ,GAAG,mCAAjB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACzC,SAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;AAC/BK,IAAAA,MAAM,EAAE,MADuB;AAE/BC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFsB;AAK/BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAE,kBAAYN,QAAd;AAAwB,eAASD;AAAjC,KAAf;AALyB,GAAvB,CAAL,CAMJQ,IANI,CAMEC,GAAD,IAAS;AACb,QAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACpB,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACH,KAFD,MAEO;AACH,YAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;AACH;AACJ,GAZM,EAYJC,KAZI,CAYGC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAZX,CAAP;AAaH,CAdM;AAgBP,OAAO,MAAMG,SAAS,GAAG,CAACjB,KAAD,EAAQC,QAAR,KAAqB;AAC1C,SAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;AAC/BK,IAAAA,MAAM,EAAE,MADuB;AAE/BC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAFsB;AAK/BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAE,kBAAYN,QAAd;AAAwB,eAASD;AAAjC,KAAf;AALyB,GAAvB,CAAL,CAMJQ,IANI,CAMEC,GAAD,IAAS;AACb,QAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACpB,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACH,KAFD,MAEO;AACH,YAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;AACH;AACJ,GAZM,EAYJJ,IAZI,CAYEU,IAAD,IAAU;AACdC,IAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4BF,IAAI,CAACG,KAAjC;AACA,WAAO,IAAP;AACH,GAfM,EAeJR,KAfI,CAeGC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAfX,CAAP;AAgBH,CAjBM;AAmBP,OAAO,MAAMQ,OAAO,GAAID,KAAD,IAAW;AAC9B,SAAOnB,KAAK,CAAE,GAAEJ,QAAS,WAAb,EAAyB;AACjCK,IAAAA,MAAM,EAAE,KADyB;AAEjCC,IAAAA,OAAO,EAAE;AACL,sBAAgB,kBADX;AAEL,uBAAkB,UAASiB,KAAM;AAF5B;AAFwB,GAAzB,CAAL,CAMJb,IANI,CAMEC,GAAD,IAAS;AACb,QAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACpB,aAAOD,GAAG,CAACE,IAAJ,EAAP;AACH;AACJ,GAVM,CAAP;AAWH,CAZM","sourcesContent":["\nconst BASE_URL = 'https://register.nomoreparties.co';\n\nexport const register = (email, password) => {\n    return fetch(`${BASE_URL}/signup`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ \"password\": password, \"email\": email })\n    }).then((res) => {\n        if (res.status === 201) {\n            return res.json();\n        } else {\n            throw new Error('Unsuccessful registration');\n        }\n    }).catch((err) => console.log(err));\n};\n\nexport const authorize = (email, password) => {\n    return fetch(`${BASE_URL}/signin`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ \"password\": password, \"email\": email })\n    }).then((res) => {\n        if (res.status === 200) {\n            return res.json();\n        } else {\n            throw new Error('Unsuccessful login');\n        }\n    }).then((data) => {\n        localStorage.setItem('jwt', data.token)\n        return true;\n    }).catch((err) => console.log(err));\n};\n\nexport const getUser = (token) => {\n    return fetch(`${BASE_URL}/users/me`, {\n        method: 'GET',\n        headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n        }\n    }).then((res) => {\n        if (res.status === 200) {\n            return res.json();\n        }\n    })\n}"]},"metadata":{},"sourceType":"module"}